generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  admin
  doctor
  patient
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  fullName      String
  role          Role           @default(patient)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  Doctor         Doctor?
  appointments   Appointment[]   @relation("PatientAppointments")
  medicalRecords MedicalRecord[] @relation("PatientMedicalRecords")
  AuditLogs      AuditLog[]      @relation("UserAuditActor")

  @@index([role])
  @@index([email])
}

model Doctor {
  id              String          @id @default(cuid())
  userId          String          @unique
  specialty       String
  location        String
  bio             String?
  profilePicture  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments    Appointment[]
  medicalRecords  MedicalRecord[]
  schedules       Schedule[]

  @@index([specialty])
  @@index([location])
}

model Appointment {
  id         String   @id @default(cuid())
  patientId  String
  doctorId   String
  date       DateTime
  time       String
  status     String   @default("pending")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient      User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
  MedicalRecord MedicalRecord?

  @@index([patientId, date])
  @@index([doctorId, date, time])
}

model MedicalRecord {
  id            String     @id @default(cuid())
  appointmentId String     @unique
  patientId     String
  doctorId      String
  diagnosis     String?
  prescription  String?
  attachments   String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient       User        @relation("PatientMedicalRecords", fields: [patientId], references: [id])
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  @@index([patientId])
  @@index([doctorId])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  entity      String
  entityId    String?
  action      String
  ip          String?
  userAgent   String?
  before      Json?
  after       Json?
  createdAt   DateTime @default(now())

  actor       User?    @relation("UserAuditActor", fields: [actorUserId], references: [id])

  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
}

model Schedule {
  id        String   @id @default(cuid())
  doctorId  String
  date      DateTime
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId, date])
}
