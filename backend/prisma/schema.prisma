generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  admin
  doctor
  patient
}

enum AppointmentStatus {
  pending
  confirmed
  completed
  cancelled
}

enum AuditAction {
  create
  update
  delete
}

model User {
  id           String   @id @default(cuid())
  fullName     String
  email        String   @unique
  passwordHash String
  role         Role     @default(patient)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  doctor         Doctor?
  patientAppointments Appointment[] @relation("PatientAppointments")
  medicalRecords MedicalRecord[] @relation("PatientMedicalRecords")
  auditLogs      AuditLog[]

  @@index([role])
  @@index([email])
  @@map("users")
}

model Doctor {
  id             String   @id @default(cuid())
  userId         String   @unique
  specialty      String
  bio            String?
  location       String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules      Schedule[]
  appointments   Appointment[]
  medicalRecords MedicalRecord[]

  @@index([specialty])
  @@index([location])
  @@map("doctors")
}

model Schedule {
  id        String   @id @default(cuid())
  doctorId  String
  date      DateTime @db.Date
  startTime String   // HH:mm format
  endTime   String   // HH:mm format
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId, date])
  @@map("schedules")
}

model Appointment {
  id        String            @id @default(cuid())
  doctorId  String
  patientId String
  date      DateTime          @db.Date
  startTime String            // HH:mm format
  endTime   String            // HH:mm format
  status    AppointmentStatus @default(pending)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  patient       User           @relation("PatientAppointments", fields: [patientId], references: [id])
  medicalRecord MedicalRecord?

  @@index([patientId, date])
  @@index([doctorId, date, startTime])
  @@index([status])
  @@map("appointments")
}

model MedicalRecord {
  id            String   @id @default(cuid())
  appointmentId String   @unique
  patientId     String
  doctorId      String
  notes         String?
  attachments   String[] // JSON array of file paths
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient     User        @relation("PatientMedicalRecords", fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@index([patientId])
  @@index([doctorId])
  @@map("medical_records")
}

model AuditLog {
  id          String      @id @default(cuid())
  actorUserId String?
  entity      String
  entityId    String?
  action      AuditAction
  before      Json?
  after       Json?
  requestId   String?
  ip          String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  // Relations
  actor User? @relation(fields: [actorUserId], references: [id])

  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
  @@index([requestId])
  @@map("audit_logs")
}
