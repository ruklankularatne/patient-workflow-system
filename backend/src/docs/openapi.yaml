openapi: 3.0.3
info:
  title: Patient Workflow API
  version: 1.0.1
servers:
  - url: /api/v1
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, fullName, password]
              properties:
                email: { type: string, format: email }
                fullName: { type: string }
                password: { type: string, minLength: 8 }
                role:
                  type: string
                  enum: [superadmin, admin, doctor, patient]
      responses:
        "201": { description: Created }
        "400": { description: Bad Request }
  /auth/login:
    post:
      summary: Login and receive httpOnly cookies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }
  /auth/logout:
    post:
      summary: Logout and clear cookies
      responses:
        "204": { description: No Content }
        "401": { description: Unauthorized }
  /auth/me:
    get:
      summary: Get current user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string }
                  role:
                    type: string
                    enum: [superadmin, admin, doctor, patient]
        "401": { description: Unauthorized }
  /doctors:
    get:
      summary: List doctors
      parameters:
        - in: query
          name: specialty
          schema:
            type: string
          description: Filter by doctor's specialty
        - in: query
          name: location
          schema:
            type: string
          description: Filter by doctor's location
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of records to skip
        - in: query
          name: take
          schema:
            type: integer
          description: Number of records to return
      responses:
        "200":
          description: A list of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    specialty: { type: string }
                    location: { type: string }
                    bio: { type: string, nullable: true }
                    profilePicture: { type: string, nullable: true }
                    user:
                      type: object
                      properties:
                        id: { type: string }
                        fullName: { type: string }
                        email: { type: string }
                        role: { type: string }
    post:
      summary: Create a doctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, fullName, password, specialty, location]
              properties:
                email: { type: string, format: email }
                fullName: { type: string }
                password: { type: string, minLength: 8 }
                specialty: { type: string }
                location: { type: string }
                bio: { type: string, nullable: true }
                profilePicture: { type: string, nullable: true }
      responses:
        "201": { description: Created }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
  /doctors/{id}:
    get:
      summary: Get doctor by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Doctor details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  specialty: { type: string }
                  location: { type: string }
                  bio: { type: string, nullable: true }
                  profilePicture: { type: string, nullable: true }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      fullName: { type: string }
                      email: { type: string }
                      role: { type: string }
        "404": { description: Not Found }
    put:
      summary: Update a doctor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                specialty: { type: string }
                location: { type: string }
                bio: { type: string, nullable: true }
                profilePicture: { type: string, nullable: true }
                fullName: { type: string }
                email: { type: string, format: email }
      responses:
        "200": { description: Updated }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Not Found }
    delete:
      summary: Delete a doctor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204": { description: No Content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Not Found }

  /schedules:
    get:
      summary: List schedules
      parameters:
        - in: query
          name: doctorId
          schema:
            type: string
          description: Filter by doctor ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Return schedules on or after this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Return schedules on or before this date
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of records to skip
        - in: query
          name: take
          schema:
            type: integer
          description: Number of records to return
      responses:
        "200":
          description: A list of schedules
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    doctorId: { type: string }
                    date: { type: string, format: date-time }
                    startTime: { type: string }
                    endTime: { type: string }
                    doctor:
                      type: object
                      properties:
                        id: { type: string }
                        specialty: { type: string }
                        location: { type: string }
                        user:
                          type: object
                          properties:
                            id: { type: string }
                            fullName: { type: string }
                            email: { type: string }
    post:
      summary: Create a schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [doctorId, date, startTime, endTime]
              properties:
                doctorId: { type: string }
                date: { type: string, format: date }
                startTime: { type: string, pattern: "^\\d{2}:\\d{2}$" }
                endTime: { type: string, pattern: "^\\d{2}:\\d{2}$" }
      responses:
        "201": { description: Created }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }

  /schedules/{id}:
    get:
      summary: Get schedule by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Schedule details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  doctorId: { type: string }
                  date: { type: string, format: date-time }
                  startTime: { type: string }
                  endTime: { type: string }
                  doctor:
                    type: object
                    properties:
                      id: { type: string }
                      specialty: { type: string }
                      location: { type: string }
                      user:
                        type: object
                        properties:
                          id: { type: string }
                          fullName: { type: string }
                          email: { type: string }
        "404": { description: Not Found }
    put:
      summary: Update a schedule
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date: { type: string, format: date }
                startTime: { type: string, pattern: "^\\d{2}:\\d{2}$" }
                endTime: { type: string, pattern: "^\\d{2}:\\d{2}$" }
      responses:
        "200": { description: Updated }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Not Found }
    delete:
      summary: Delete a schedule
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204": { description: No Content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Not Found }